# Copyright (C) 1994-2020 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of both the OpenPBS software ("OpenPBS")
# and the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# OpenPBS is free software. You can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# OpenPBS is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# PBS Pro is commercially licensed software that shares a common core with
# the OpenPBS software.  For a copy of the commercial license terms and
# conditions, go to: (http://www.pbspro.com/agreement.html) or contact the
# Altair Legal Department.
#
# Altair's dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of OpenPBS and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair's trademarks, including but not limited to "PBS™",
# "OpenPBS®", "PBS Professional®", and "PBS Pro™" and Altair's logos is
# subject to Altair's trademark licensing policies.

# These are unfreed memory (still reachable blocks) detected in python

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
#   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
#   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
#   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

###{
###   ADDRESS_IN_RANGE/Invalid read of size 4
###   Memcheck:Addr4
###   fun:PyObject_Free
###}
###
###{
###   ADDRESS_IN_RANGE/Invalid read of size 4
###   Memcheck:Value4
###   fun:PyObject_Free
###}
###
###{
###   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
###   Memcheck:Addr8
###   fun:PyObject_Free
###}
###
###{
###   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
###   Memcheck:Value8
###   fun:PyObject_Free
###}
###
###{
###   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
###   Memcheck:Cond
###   fun:PyObject_Free
###}

###{
###   ADDRESS_IN_RANGE/Invalid read of size 4
###   Memcheck:Addr4
###   fun:PyObject_Realloc
###}
###
###{
###   ADDRESS_IN_RANGE/Invalid read of size 4
###   Memcheck:Value4
###   fun:PyObject_Realloc
###}
###
###{
###   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
###   Memcheck:Addr8
###   fun:PyObject_Realloc
###}
###
###{
###   ADDRESS_IN_RANGE/Use of uninitialised value of size 8
###   Memcheck:Value8
###   fun:PyObject_Realloc
###}
###
###{
###   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
###   Memcheck:Cond
###   fun:PyObject_Realloc
###}

###
### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.
###

{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3
   obj:/lib/libz.so.1.2.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
}

###
### These occur from somewhere within the SSL, when running
###  test_socket_sll.  They are too general to leave on by default.
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:memset
###}
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:memset
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Cond
###   fun:MD5_Update
###}
###
###{
###   somewhere in SSL stuff
###   Memcheck:Value4
###   fun:MD5_Update
###}

#
# All of these problems come from using test_socket_ssl
#
{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_bin2bn
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:BN_num_bits_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont_word
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BN_mod_exp_mont
}

{
   from test_socket_ssl
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libcrypto.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:RSA_verify
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_set_key_unchecked
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:DES_encrypt2
}

{
   from test_socket_ssl
   Memcheck:Cond
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Value4
   obj:/usr/lib/libssl.so.0.9.7
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:BUF_MEM_grow_clean
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:memcpy
   fun:ssl3_read_bytes
}

{
   from test_socket_ssl
   Memcheck:Cond
   fun:SHA1_Update
}

{
   from test_socket_ssl
   Memcheck:Value4
   fun:SHA1_Update
}

{
   From PBS (TPP layer) - suppress epoll_pwait() glibc bug
   Memcheck:Param
   epoll_pwait(sigmask)
   fun:epoll_pwait
   fun:tpp_em_pwait
   fun:tpp_em_wait
   fun:work
   fun:start_thread
   fun:clone
}
{
   From PBS (TPP layer) - suppress warning about uninitialized bytes in sendto
   Memcheck:Param
   socketcall.sendto(msg)
   fun:send
   fun:send_data
   fun:handle_cmd
   fun:work
   fun:start_thread
   fun:clone
}
{
   From PBS (server) - Suppress intentional unfreed memory for pbs_db_get_svr_id
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:strdup
   fun:pbs_db_get_svr_id
   fun:chk_and_update_db_svrhost
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from hook_recov
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:hook_recov
   fun:pbsd_init
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from loading hook script at hook_recov
   Memcheck:Leak
   fun:malloc
   fun:pbs_python_ext_alloc_python_script
   fun:hook_recov
   fun:pbsd_init
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from loading hook script at hook_recov
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:pbs_python_ext_alloc_python_script
   fun:hook_recov
   fun:pbsd_init
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from allocating hook data at hook_recov
   Memcheck:Leak
   fun:malloc
   fun:hook_alloc
   fun:hook_recov
   fun:pbsd_init
   fun:main
}
{
   From PBS (all deamons) - Suppress memory allocated for log mutex
   Memcheck:Leak
   fun:calloc
   fun:log_mutex_lock
   fun:log_record
   fun:*
}
{
   From PBS (mom) - Suppress intentional unfreed memory from python_script_alloc() inside req_copy_hookfile() that is tracked globally in svr_allhooks.
   Memcheck:Leak
   fun:malloc
   ...
   fun:python_script_alloc
   ...
   fun:req_copy_hookfile
   fun:is_request
   fun:do_tpp
   fun:tpp_request
   fun:wait_request
   fun:main
}
{
   From PBS (mom) - Suppress intentional unfreed memory from hook_recov() inside req_copy_hookfile() that is tracked globally in svr_allhooks.
   Memcheck:Leak
   fun:malloc
   ...
   fun:hook_recov
   fun:req_copy_hookfile
   fun:is_request
   fun:do_tpp
   fun:tpp_request
   fun:wait_request
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from pbs_python_populae_attributes_to_python_class() that is tracked globally in pbs_resource_value_list.
   Memcheck:Leak
   fun:malloc
   fun:pbs_python_populate_attributes_to_python_class
   fun:*
}
{
   From PBS (server) - Suppress intentional unfreed memory from pbs_python_populate_attributes_to_python_class() that is tracked and freed in a local pbs_list_head
   Memcheck:Leak
   fun:malloc
   fun:attrlist_alloc
   fun:attrlist_create
   fun:encode_l
   fun:encode_resc
   fun:pbs_python_populate_attributes_to_python_class
   fun:*
}
{
   From PBS (server) - Suppress intentional unfreed memory from pbs_python_populate_attributes_to_python_class() that is tracked and freed in a local pbs_list_head.
   Memcheck:Leak
   fun:malloc
   fun:attrlist_alloc
   fun:attrlist_create
   fun:encode_size
   fun:encode_resc
   fun:pbs_python_populate_attributes_to_python_class
   fun:*
}
{
   From PBS (server) - Suppress intentional unfreed memory from pbs_python_populate_attributes_to_python_class() that is tracked and freed in a local pbs_list_head.
   Memcheck:Leak
   fun:malloc
   fun:attrlist_alloc
   fun:attrlist_create
   fun:encode_str
   fun:encode_resc
   fun:pbs_python_populate_attributes_to_python_class
   fun:*
}
{
   From PBS (server) - Suppress intentional unfreed memory from pbs_python_populate_attributes_to_python_class() that is tracked and freed in a local pbs_list_head.
   Memcheck:Leak
   fun:malloc
   fun:attrlist_alloc
   fun:attrlist_create
   fun:encode_time
   fun:encode_resc
   fun:pbs_python_populate_attributes_to_python_class
   fun:*
}
{
   From PBS (server) - Suppress intentional unfreed memory from loading hook script at mgr_hook_import
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:pbs_python_ext_alloc_python_script
   fun:mgr_hook_import
   fun:req_manager
   fun:dispatch_request
   fun:process_request
   fun:wait_request
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from loading hook script at mgr_hook_import
   Memcheck:Leak
   fun:malloc
   fun:pbs_python_ext_alloc_python_script
   fun:mgr_hook_import
   fun:req_manager
   fun:dispatch_request
   fun:process_request
   fun:wait_request
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from allocating hook data at mgr_hook_create
   Memcheck:Leak
   fun:malloc
   fun:hook_alloc
   fun:mgr_hook_create
   fun:req_manager
   fun:dispatch_request
   fun:process_request
   fun:wait_request
   fun:main
}
{
   From PBS (server) - Suppress intentional unfreed memory from allocating hook name at mgr_hook_create
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:set_hook_name
   fun:mgr_hook_create
   fun:req_manager
   fun:dispatch_request
   fun:process_request
   fun:wait_request
   fun:main
}
{
   From PBS - Suppress intentional unfreed memory of auth struct inside global tpp_conf struct
   Memcheck:Leak
   fun:malloc
   fun:make_auth_config
   fun:set_tpp_config
   fun:main
}
{
   From PBS - Suppress intentional unfreed memory of auth struct inside global tpp_conf struct
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:make_auth_config
   fun:set_tpp_config
   fun:main
}
{
   From PBS - Suppress intentional unfreed avl tree tls data
   Memcheck:Leak
   fun:calloc
   fun:get_avl_tls
   fun:avl_*
   ...
}
{
   From PBS - Suppress intentional unfreed tpp tls data
   Memcheck:Leak
   fun:calloc
   fun:tpp_get_tls
   fun:work
   ...
}
{
   From PBS - Suppress uninitialized job fs structure in mom
   Memcheck:Param
   write(buf)
   ...
   fun:job_save_fs
   ...
}
{
   From PBS - Suppress hook allocated buffer
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:hook_alloc
   fun:hook_recov
   ...
}
{
   From PBS - Suppress hook allocated buffer
   Memcheck:Leak
   match-leak-kinds: possible
   fun:malloc
   fun:hook_alloc
   fun:mgr_hook_create
   ...
}
{
   From PBS - Suppress uninitialized DIS buffer
   Memcheck:Param
   write(buf)
   ...
   fun:__send_pkt
   fun:dis_flush
   ...
}
